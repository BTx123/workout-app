//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.5.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace WorkoutApp.Core.Database
{
   public partial class Set
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Set()
      {
         _isAmrap = false;
         _isDone = false;

         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static Set CreateSetUnsafe()
      {
         return new Set();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="index"></param>
      /// <param name="repetitions"></param>
      /// <param name="weightkg"></param>
      /// <param name="isamrap"></param>
      /// <param name="isdone"></param>
      /// <param name="createdat"></param>
      /// <param name="updatedat"></param>
      /// <param name="setgroup"></param>
      public Set(int index, int repetitions, double weightkg, DateTime createdat, DateTime updatedat, global::WorkoutApp.Core.Database.SetGroup setgroup, bool isamrap = false, bool isdone = false)
      {
         this._index = index;

         this._repetitions = repetitions;

         this._weightKg = weightkg;

         this._isAmrap = isamrap;

         this._isDone = isdone;

         this._createdAt = createdat;

         this._updatedAt = updatedat;

         if (setgroup == null) throw new ArgumentNullException(nameof(setgroup));
         this.SetGroup = setgroup;
         setgroup.Sets.Add(this);

         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="index"></param>
      /// <param name="repetitions"></param>
      /// <param name="weightkg"></param>
      /// <param name="isamrap"></param>
      /// <param name="isdone"></param>
      /// <param name="createdat"></param>
      /// <param name="updatedat"></param>
      /// <param name="setgroup"></param>
      public static Set Create(int index, int repetitions, double weightkg, DateTime createdat, DateTime updatedat, global::WorkoutApp.Core.Database.SetGroup setgroup, bool isamrap = false, bool isdone = false)
      {
         return new Set(index, repetitions, weightkg, createdat, updatedat, setgroup, isamrap, isdone);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Backing field for CreatedAt
      /// </summary>
      protected DateTime _createdAt;
      /// <summary>
      /// When provided in a partial class, allows value of CreatedAt to be changed before setting.
      /// </summary>
      partial void SetCreatedAt(DateTime oldValue, ref DateTime newValue);
      /// <summary>
      /// When provided in a partial class, allows value of CreatedAt to be changed before returning.
      /// </summary>
      partial void GetCreatedAt(ref DateTime result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public DateTime CreatedAt
      {
         get
         {
            DateTime value = _createdAt;
            GetCreatedAt(ref value);
            return (_createdAt = value);
         }
         set
         {
            DateTime oldValue = CreatedAt;
            SetCreatedAt(oldValue, ref value);
            if (oldValue != value)
            {
               _createdAt = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Identity, Indexed, Required
      /// Unique identifier
      /// </summary>
      [Key]
      [Required]
      [System.ComponentModel.Description("Unique identifier")]
      public long Id { get; set; }

      /// <summary>
      /// Backing field for Index
      /// </summary>
      protected int _index;
      /// <summary>
      /// When provided in a partial class, allows value of Index to be changed before setting.
      /// </summary>
      partial void SetIndex(int oldValue, ref int newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Index to be changed before returning.
      /// </summary>
      partial void GetIndex(ref int result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public int Index
      {
         get
         {
            int value = _index;
            GetIndex(ref value);
            return (_index = value);
         }
         set
         {
            int oldValue = Index;
            SetIndex(oldValue, ref value);
            if (oldValue != value)
            {
               _index = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Backing field for IsAmrap
      /// </summary>
      protected bool _isAmrap;
      /// <summary>
      /// When provided in a partial class, allows value of IsAmrap to be changed before setting.
      /// </summary>
      partial void SetIsAmrap(bool oldValue, ref bool newValue);
      /// <summary>
      /// When provided in a partial class, allows value of IsAmrap to be changed before returning.
      /// </summary>
      partial void GetIsAmrap(ref bool result);

      /// <summary>
      /// Required, Default value = false
      /// </summary>
      [Required]
      public bool IsAmrap
      {
         get
         {
            bool value = _isAmrap;
            GetIsAmrap(ref value);
            return (_isAmrap = value);
         }
         set
         {
            bool oldValue = IsAmrap;
            SetIsAmrap(oldValue, ref value);
            if (oldValue != value)
            {
               _isAmrap = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Backing field for IsDone
      /// </summary>
      protected bool _isDone;
      /// <summary>
      /// When provided in a partial class, allows value of IsDone to be changed before setting.
      /// </summary>
      partial void SetIsDone(bool oldValue, ref bool newValue);
      /// <summary>
      /// When provided in a partial class, allows value of IsDone to be changed before returning.
      /// </summary>
      partial void GetIsDone(ref bool result);

      /// <summary>
      /// Required, Default value = false
      /// </summary>
      [Required]
      public bool IsDone
      {
         get
         {
            bool value = _isDone;
            GetIsDone(ref value);
            return (_isDone = value);
         }
         set
         {
            bool oldValue = IsDone;
            SetIsDone(oldValue, ref value);
            if (oldValue != value)
            {
               _isDone = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Backing field for Repetitions
      /// </summary>
      protected int _repetitions;
      /// <summary>
      /// When provided in a partial class, allows value of Repetitions to be changed before setting.
      /// </summary>
      partial void SetRepetitions(int oldValue, ref int newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Repetitions to be changed before returning.
      /// </summary>
      partial void GetRepetitions(ref int result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public int Repetitions
      {
         get
         {
            int value = _repetitions;
            GetRepetitions(ref value);
            return (_repetitions = value);
         }
         set
         {
            int oldValue = Repetitions;
            SetRepetitions(oldValue, ref value);
            if (oldValue != value)
            {
               _repetitions = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Backing field for UpdatedAt
      /// </summary>
      protected DateTime _updatedAt;
      /// <summary>
      /// When provided in a partial class, allows value of UpdatedAt to be changed before setting.
      /// </summary>
      partial void SetUpdatedAt(DateTime oldValue, ref DateTime newValue);
      /// <summary>
      /// When provided in a partial class, allows value of UpdatedAt to be changed before returning.
      /// </summary>
      partial void GetUpdatedAt(ref DateTime result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public DateTime UpdatedAt
      {
         get
         {
            DateTime value = _updatedAt;
            GetUpdatedAt(ref value);
            return (_updatedAt = value);
         }
         set
         {
            DateTime oldValue = UpdatedAt;
            SetUpdatedAt(oldValue, ref value);
            if (oldValue != value)
            {
               _updatedAt = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Backing field for WeightKg
      /// </summary>
      protected double _weightKg;
      /// <summary>
      /// When provided in a partial class, allows value of WeightKg to be changed before setting.
      /// </summary>
      partial void SetWeightKg(double oldValue, ref double newValue);
      /// <summary>
      /// When provided in a partial class, allows value of WeightKg to be changed before returning.
      /// </summary>
      partial void GetWeightKg(ref double result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public double WeightKg
      {
         get
         {
            double value = _weightKg;
            GetWeightKg(ref value);
            return (_weightKg = value);
         }
         set
         {
            double oldValue = WeightKg;
            SetWeightKg(oldValue, ref value);
            if (oldValue != value)
            {
               _weightKg = value;
               OnPropertyChanged();
            }
         }
      }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::WorkoutApp.Core.Database.SetGroup SetGroup { get; set; }

   }
}

