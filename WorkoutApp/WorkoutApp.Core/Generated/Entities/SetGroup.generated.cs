//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.5.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace WorkoutApp.Core.Database
{
   public partial class SetGroup
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected SetGroup()
      {
         // NOTE: This class has one-to-one associations with SetGroup.
         // One-to-one associations are not validated in constructors since this causes a scenario where each one must be constructed before the other.

         _note = "string.Empty";
         Sets = new System.Collections.Generic.HashSet<global::WorkoutApp.Core.Database.Set>();

         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static SetGroup CreateSetGroupUnsafe()
      {
         return new SetGroup();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="note"></param>
      /// <param name="workout"></param>
      public SetGroup(global::WorkoutApp.Core.Database.Workout workout, string note = "string.Empty")
      {
         // NOTE: This class has one-to-one associations with SetGroup.
         // One-to-one associations are not validated in constructors since this causes a scenario where each one must be constructed before the other.

         if (string.IsNullOrEmpty(note)) throw new ArgumentNullException(nameof(note));
         this._note = note;

         if (workout == null) throw new ArgumentNullException(nameof(workout));
         this.Workout = workout;
         workout.SetGroups.Add(this);

         Sets = new System.Collections.Generic.HashSet<global::WorkoutApp.Core.Database.Set>();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="note"></param>
      /// <param name="workout"></param>
      public static SetGroup Create(global::WorkoutApp.Core.Database.Workout workout, string note = "string.Empty")
      {
         return new SetGroup(workout, note);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Identity, Indexed, Required
      /// Unique identifier
      /// </summary>
      [Key]
      [Required]
      [System.ComponentModel.Description("Unique identifier")]
      public long Id { get; set; }

      /// <summary>
      /// Backing field for Note
      /// </summary>
      protected string _note;
      /// <summary>
      /// When provided in a partial class, allows value of Note to be changed before setting.
      /// </summary>
      partial void SetNote(string oldValue, ref string newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Note to be changed before returning.
      /// </summary>
      partial void GetNote(ref string result);

      /// <summary>
      /// Required, Default value = &quot;string.Empty&quot;
      /// </summary>
      [Required]
      public string Note
      {
         get
         {
            string value = _note;
            GetNote(ref value);
            return (_note = value);
         }
         set
         {
            string oldValue = Note;
            SetNote(oldValue, ref value);
            if (oldValue != value)
            {
               _note = value;
               OnPropertyChanged();
            }
         }
      }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::WorkoutApp.Core.Database.Exercise Exercise { get; set; }

      public virtual ICollection<global::WorkoutApp.Core.Database.Set> Sets { get; private set; }

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::WorkoutApp.Core.Database.Workout Workout { get; set; }

   }
}

