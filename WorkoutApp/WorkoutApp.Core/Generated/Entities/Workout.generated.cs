//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.5.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;

namespace WorkoutApp.Core.Database
{
   public partial class Workout
   {
      partial void Init();

      /// <summary>
      /// Default constructor. Protected due to required properties, but present because EF needs it.
      /// </summary>
      protected Workout()
      {
         Note = "string.Empty";
         SetGroups = new System.Collections.Generic.HashSet<global::WorkoutApp.Core.Database.SetGroup>();

         Init();
      }

      /// <summary>
      /// Replaces default constructor, since it's protected. Caller assumes responsibility for setting all required values before saving.
      /// </summary>
      public static Workout CreateWorkoutUnsafe()
      {
         return new Workout();
      }

      /// <summary>
      /// Public constructor with required data
      /// </summary>
      /// <param name="startedat"></param>
      /// <param name="name"></param>
      /// <param name="note"></param>
      /// <param name="createdat"></param>
      /// <param name="updatedat"></param>
      /// <param name="user"></param>
      public Workout(DateTime startedat, string name, DateTime createdat, DateTime updatedat, global::WorkoutApp.Core.Database.User user, string note = "string.Empty")
      {
         this._startedAt = startedat;

         if (string.IsNullOrEmpty(name)) throw new ArgumentNullException(nameof(name));
         this._name = name;

         if (string.IsNullOrEmpty(note)) throw new ArgumentNullException(nameof(note));
         this.Note = note;

         this._createdAt = createdat;

         this._updatedAt = updatedat;

         if (user == null) throw new ArgumentNullException(nameof(user));
         this.User = user;
         user.Workouts.Add(this);

         SetGroups = new System.Collections.Generic.HashSet<global::WorkoutApp.Core.Database.SetGroup>();
         Init();
      }

      /// <summary>
      /// Static create function (for use in LINQ queries, etc.)
      /// </summary>
      /// <param name="startedat"></param>
      /// <param name="name"></param>
      /// <param name="note"></param>
      /// <param name="createdat"></param>
      /// <param name="updatedat"></param>
      /// <param name="user"></param>
      public static Workout Create(DateTime startedat, string name, DateTime createdat, DateTime updatedat, global::WorkoutApp.Core.Database.User user, string note = "string.Empty")
      {
         return new Workout(startedat, name, createdat, updatedat, user, note);
      }

      /*************************************************************************
       * Properties
       *************************************************************************/

      /// <summary>
      /// Backing field for CompletedAt
      /// </summary>
      protected DateTime? _completedAt;
      /// <summary>
      /// When provided in a partial class, allows value of CompletedAt to be changed before setting.
      /// </summary>
      partial void SetCompletedAt(DateTime? oldValue, ref DateTime? newValue);
      /// <summary>
      /// When provided in a partial class, allows value of CompletedAt to be changed before returning.
      /// </summary>
      partial void GetCompletedAt(ref DateTime? result);

      public DateTime? CompletedAt
      {
         get
         {
            DateTime? value = _completedAt;
            GetCompletedAt(ref value);
            return (_completedAt = value);
         }
         set
         {
            DateTime? oldValue = CompletedAt;
            SetCompletedAt(oldValue, ref value);
            if (oldValue != value)
            {
               _completedAt = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Backing field for CreatedAt
      /// </summary>
      protected DateTime _createdAt;
      /// <summary>
      /// When provided in a partial class, allows value of CreatedAt to be changed before setting.
      /// </summary>
      partial void SetCreatedAt(DateTime oldValue, ref DateTime newValue);
      /// <summary>
      /// When provided in a partial class, allows value of CreatedAt to be changed before returning.
      /// </summary>
      partial void GetCreatedAt(ref DateTime result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public DateTime CreatedAt
      {
         get
         {
            DateTime value = _createdAt;
            GetCreatedAt(ref value);
            return (_createdAt = value);
         }
         set
         {
            DateTime oldValue = CreatedAt;
            SetCreatedAt(oldValue, ref value);
            if (oldValue != value)
            {
               _createdAt = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Identity, Indexed, Required
      /// Unique identifier
      /// </summary>
      [Key]
      [Required]
      [System.ComponentModel.Description("Unique identifier")]
      public long Id { get; set; }

      /// <summary>
      /// Backing field for Name
      /// </summary>
      protected string _name;
      /// <summary>
      /// When provided in a partial class, allows value of Name to be changed before setting.
      /// </summary>
      partial void SetName(string oldValue, ref string newValue);
      /// <summary>
      /// When provided in a partial class, allows value of Name to be changed before returning.
      /// </summary>
      partial void GetName(ref string result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public string Name
      {
         get
         {
            string value = _name;
            GetName(ref value);
            return (_name = value);
         }
         set
         {
            string oldValue = Name;
            SetName(oldValue, ref value);
            if (oldValue != value)
            {
               _name = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Required, Default value = &quot;string.Empty&quot;
      /// </summary>
      [Required]
      public string Note { get; set; }

      /// <summary>
      /// Backing field for StartedAt
      /// </summary>
      protected DateTime _startedAt;
      /// <summary>
      /// When provided in a partial class, allows value of StartedAt to be changed before setting.
      /// </summary>
      partial void SetStartedAt(DateTime oldValue, ref DateTime newValue);
      /// <summary>
      /// When provided in a partial class, allows value of StartedAt to be changed before returning.
      /// </summary>
      partial void GetStartedAt(ref DateTime result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public DateTime StartedAt
      {
         get
         {
            DateTime value = _startedAt;
            GetStartedAt(ref value);
            return (_startedAt = value);
         }
         set
         {
            DateTime oldValue = StartedAt;
            SetStartedAt(oldValue, ref value);
            if (oldValue != value)
            {
               _startedAt = value;
               OnPropertyChanged();
            }
         }
      }

      /// <summary>
      /// Backing field for UpdatedAt
      /// </summary>
      protected DateTime _updatedAt;
      /// <summary>
      /// When provided in a partial class, allows value of UpdatedAt to be changed before setting.
      /// </summary>
      partial void SetUpdatedAt(DateTime oldValue, ref DateTime newValue);
      /// <summary>
      /// When provided in a partial class, allows value of UpdatedAt to be changed before returning.
      /// </summary>
      partial void GetUpdatedAt(ref DateTime result);

      /// <summary>
      /// Required
      /// </summary>
      [Required]
      public DateTime UpdatedAt
      {
         get
         {
            DateTime value = _updatedAt;
            GetUpdatedAt(ref value);
            return (_updatedAt = value);
         }
         set
         {
            DateTime oldValue = UpdatedAt;
            SetUpdatedAt(oldValue, ref value);
            if (oldValue != value)
            {
               _updatedAt = value;
               OnPropertyChanged();
            }
         }
      }

      /*************************************************************************
       * Navigation properties
       *************************************************************************/

      public virtual ICollection<global::WorkoutApp.Core.Database.SetGroup> SetGroups { get; private set; }

      /// <summary>
      /// Required
      /// </summary>
      public virtual global::WorkoutApp.Core.Database.User User { get; set; }

   }
}

