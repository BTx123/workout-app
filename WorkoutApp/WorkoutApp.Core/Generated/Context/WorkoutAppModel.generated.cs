//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//     Produced by Entity Framework Visual Editor v4.2.5.1
//     Source:                    https://github.com/msawczyn/EFDesigner
//     Visual Studio Marketplace: https://marketplace.visualstudio.com/items?itemName=michaelsawczyn.EFDesigner
//     Documentation:             https://msawczyn.github.io/EFDesigner/
//     License (MIT):             https://github.com/msawczyn/EFDesigner/blob/master/LICENSE
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace WorkoutApp.Core.Database
{
   /// <inheritdoc/>
   public partial class WorkoutAppModel : DbContext
   {
      #region DbSets
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::WorkoutApp.Core.Database.Barbell> Barbells { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::WorkoutApp.Core.Database.Exercise> Exercises { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::WorkoutApp.Core.Database.Set> Sets { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::WorkoutApp.Core.Database.SetGroup> SetGroups { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::WorkoutApp.Core.Database.User> Users { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::WorkoutApp.Core.Database.WeighIn> WeighIns { get; set; }
      public virtual Microsoft.EntityFrameworkCore.DbSet<global::WorkoutApp.Core.Database.Workout> Workouts { get; set; }

      #endregion DbSets

      /// <summary>
      ///     <para>
      ///         Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> class using the specified options.
      ///         The <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method will still be called to allow further
      ///         configuration of the options.
      ///     </para>
      /// </summary>
      /// <param name="options">The options for this context.</param>
      public WorkoutAppModel(DbContextOptions<WorkoutAppModel> options) : base(options)
      {
      }

      partial void CustomInit(DbContextOptionsBuilder optionsBuilder);

      /// <inheritdoc />
      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
      {
         optionsBuilder.UseLazyLoadingProxies();

         CustomInit(optionsBuilder);
      }

      partial void OnModelCreatingImpl(ModelBuilder modelBuilder);
      partial void OnModelCreatedImpl(ModelBuilder modelBuilder);

      /// <summary>
      ///     Override this method to further configure the model that was discovered by convention from the entity types
      ///     exposed in <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> properties on your derived context. The resulting model may be cached
      ///     and re-used for subsequent instances of your derived context.
      /// </summary>
      /// <remarks>
      ///     If a model is explicitly set on the options for this context (via <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.UseModel(Microsoft.EntityFrameworkCore.Metadata.IModel)" />)
      ///     then this method will not be run.
      /// </remarks>
      /// <param name="modelBuilder">
      ///     The builder being used to construct the model for this context. Databases (and other extensions) typically
      ///     define extension methods on this object that allow you to configure aspects of the model that are specific
      ///     to a given database.
      /// </param>
      protected override void OnModelCreating(ModelBuilder modelBuilder)
      {
         base.OnModelCreating(modelBuilder);
         OnModelCreatingImpl(modelBuilder);

         modelBuilder.HasDefaultSchema("dbo");

         modelBuilder.Entity<global::WorkoutApp.Core.Database.Barbell>()
                     .ToTable("Barbells")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Barbell>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Barbell>()
                     .Property(t => t.Name)
                     .HasField("_name")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Barbell>()
                     .Property(t => t.WeightKg)
                     .HasField("_weightKg")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();

         modelBuilder.Entity<global::WorkoutApp.Core.Database.Exercise>()
                     .ToTable("Exercises")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Exercise>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Exercise>()
                     .Property(t => t.Name)
                     .HasField("_name")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Exercise>()
                     .Property(t => t.Description)
                     .HasField("_description")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .HasDefaultValue(string.Empty)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Exercise>()
                     .HasOne<global::WorkoutApp.Core.Database.Barbell>(p => p.Barbell)
                     .WithOne()
                     .HasForeignKey("Barbell", "ExerciseBarbellId");

         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .ToTable("Sets")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .Property(t => t.Index)
                     .HasField("_index")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .Property(t => t.Repetitions)
                     .HasField("_repetitions")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .Property(t => t.WeightKg)
                     .HasField("_weightKg")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .Property(t => t.IsAmrap)
                     .HasField("_isAmrap")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .HasDefaultValue(false)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .Property(t => t.IsDone)
                     .HasField("_isDone")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .HasDefaultValue(false)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .Property(t => t.CreatedAt)
                     .HasField("_createdAt")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Set>()
                     .Property(t => t.UpdatedAt)
                     .HasField("_updatedAt")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();

         modelBuilder.Entity<global::WorkoutApp.Core.Database.SetGroup>()
                     .ToTable("SetGroups")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.SetGroup>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.SetGroup>()
                     .Property(t => t.Note)
                     .HasField("_note")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .HasDefaultValue(string.Empty)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.SetGroup>()
                     .HasOne<global::WorkoutApp.Core.Database.Exercise>(p => p.Exercise)
                     .WithOne(p => p.SetGroup)
                     .HasForeignKey("SetGroup", "ExerciseId");
         modelBuilder.Entity<global::WorkoutApp.Core.Database.SetGroup>()
                     .HasMany<global::WorkoutApp.Core.Database.Set>(p => p.Sets)
                     .WithOne(p => p.SetGroup)
                     .HasForeignKey("SetGroupId")
                     .IsRequired();

         modelBuilder.Entity<global::WorkoutApp.Core.Database.User>()
                     .ToTable("Users")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.User>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.User>()
                     .Property(t => t.Username)
                     .HasMaxLength(36)
                     .HasField("_username")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.User>()
                     .Property(t => t.Role)
                     .HasMaxLength(36)
                     .HasField("_role")
                     .UsePropertyAccessMode(PropertyAccessMode.Field);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.User>()
                     .Property(t => t.CreatedAt)
                     .HasField("_createdAt")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.User>()
                     .Property(t => t.UpdatedAt)
                     .HasField("_updatedAt")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.User>()
                     .HasMany<global::WorkoutApp.Core.Database.WeighIn>(p => p.WeighIns)
                     .WithOne()
                     .HasForeignKey("UserWeighInsId")
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.User>()
                     .HasMany<global::WorkoutApp.Core.Database.Workout>(p => p.Workouts)
                     .WithOne(p => p.User)
                     .HasForeignKey("UserId")
                     .IsRequired();

         modelBuilder.Entity<global::WorkoutApp.Core.Database.WeighIn>()
                     .ToTable("WeighIns")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.WeighIn>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.WeighIn>()
                     .Property(t => t.WeightKg)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.WeighIn>()
                     .Property(t => t.CreatedAt)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.WeighIn>()
                     .Property(t => t.UpdatedAt)
                     .IsRequired();

         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .ToTable("Workouts")
                     .HasKey(t => t.Id);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .Property(t => t.Id)
                     .ValueGeneratedOnAdd()
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .Property(t => t.StartedAt)
                     .HasField("_startedAt")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .Property(t => t.CompletedAt)
                     .HasField("_completedAt")
                     .UsePropertyAccessMode(PropertyAccessMode.Field);
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .Property(t => t.Name)
                     .HasField("_name")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .Property(t => t.Note)
                     .HasDefaultValue(string.Empty)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .Property(t => t.CreatedAt)
                     .HasField("_createdAt")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .Property(t => t.UpdatedAt)
                     .HasField("_updatedAt")
                     .UsePropertyAccessMode(PropertyAccessMode.Field)
                     .IsRequired();
         modelBuilder.Entity<global::WorkoutApp.Core.Database.Workout>()
                     .HasMany<global::WorkoutApp.Core.Database.SetGroup>(p => p.SetGroups)
                     .WithOne(p => p.Workout)
                     .HasForeignKey("WorkoutId")
                     .IsRequired();

         OnModelCreatedImpl(modelBuilder);
      }
   }
}
